/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.08.2024 23:22:41

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1888;
#else
constexpr int kTensorArenaSize = 864;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,20 } };
const TfArray<1, float> quant0_scale = { 1, { 0.035294119268655777, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 5, 4, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 128, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data3[5] = { 375, -419, -1469, -212, 1500, };
const TfArray<1, int> tensor_dimension3 = { 1, { 5 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00048824585974216461, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[5*64] = { 
  24, 15, -77, 31, -40, -6, -24, -29, 27, -23, -4, -21, -17, 10, 2, -43, -18, 21, 18, -43, 4, -32, 4, -42, 4, -18, -20, -8, -24, 21, -53, 41, 16, 6, 33, -72, -14, -80, 16, 29, 20, 35, -6, 8, 21, 39, 26, -23, 23, 18, 9, 4, -46, 26, -82, -3, 33, 4, -60, 27, -82, 10, -55, -51, 
  23, 38, -43, 17, 2, 30, 30, 32, 30, -32, -27, 7, 18, 26, -27, -52, -29, 21, 27, -28, 19, -35, -28, 5, 5, 17, 21, -41, -69, 15, 12, -40, -49, -56, -37, -68, 39, -38, -88, 27, 42, 2, 31, -73, -12, 39, -66, -12, -47, 32, -13, 21, 8, -91, -56, 15, 13, -11, -53, -85, -57, -2, -90, -30, 
  -27, -41, 44, -65, -65, 44, 61, -36, 14, 38, 33, -7, 24, 9, -1, 31, 49, -54, 9, 56, -45, 34, -30, 34, -31, -57, -4, 56, 16, 4, 11, 50, 21, 51, -43, -57, -15, 11, 23, 24, -27, 31, -23, 9, -5, -25, 23, 33, -43, -25, -2, -75, 31, 24, -72, -60, 32, 25, 7, 24, 7, -15, 21, 18, 
  11, 20, 30, 12, -29, -44, -81, -58, -68, -31, -6, -3, 0, 8, 4, 36, 49, -81, -40, 31, -43, 11, 7, -5, -68, 4, -43, -54, -10, 9, -87, -89, -13, 8, 17, 31, -33, -7, 19, -33, 17, -78, -29, -19, -75, -41, 25, -91, -69, 12, 34, 10, 15, 36, 39, 34, -21, -12, 2, 20, 53, -6, 19, 28, 
  -8, -73, -102, 14, -111, 28, 6, -17, -48, 19, -5, 53, -21, 6, -127, 39, -55, 14, -42, -55, 39, 28, -29, 32, -39, 9, 46, -8, 24, -113, 23, -70, -53, 2, 36, 51, 31, -14, 27, -54, -54, -56, 31, 16, -77, -32, 27, -23, 21, -23, -67, -2, -46, 32, 72, 35, -51, -77, 30, 24, -11, -4, 24, -70, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 5,64 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0093663474544882774, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[64] = { 582, -1537, -1439, 1264, -1371, -958, 417, -52, -653, -561, -1181, 1309, -759, -437, -73, 1269, -750, 1963, -979, -326, 2436, 698, -102, -906, -375, 1106, 310, -2548, 759, -341, -632, -686, -545, -3175, 300, 3229, 610, -554, 974, -1305, -1645, -280, 1494, 1381, 255, -246, 2455, -1196, 2726, -272, -2334, -3, -884, 1896, 2470, 2459, -404, -1326, 1793, 1456, 150, -614, 2078, -447, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00024728334392420948, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[64*128] = { 
  -14, -1, 0, -4, -49, -13, 0, 9, -8, -13, -4, 18, -14, -61, -13, -3, 16, 5, 20, 3, 9, 7, -8, 7, -12, 17, 14, -5, -8, 4, 4, 21, -1, -1, -5, -2, -10, 2, 2, -11, -5, -7, -8, 4, 13, -18, -18, -8, 9, 16, -1, 5, 12, 0, -6, -4, 29, 9, 12, -13, 3, -3, -3, -8, -2, -6, -2, 1, -49, -10, 2, 4, 0, 11, 15, 12, -3, -19, 5, -6, -7, 35, 2, 15, -12, -1, -19, 2, 8, 1, -11, 4, 7, 0, -8, -8, 10, 16, -7, 19, -65, -4, -16, -4, -10, -2, -1, 20, 10, -43, 45, -16, 7, 14, 48, 31, -16, 10, -17, -7, -5, 14, 16, 5, 7, -11, 12, -3, 
  -70, -1, -10, 24, -34, -8, 2, -11, 1, -4, 12, -7, -13, -27, 13, 15, -8, -8, -1, -13, -8, -7, 12, 3, 14, 31, -6, -7, -2, -43, 1, 15, -36, 11, 9, 0, -53, -3, -9, -6, 0, -3, -1, 9, -8, -33, 14, 19, -4, -4, 19, -6, -10, 12, -1, -12, -7, 16, 8, 16, 11, -42, 1, 6, -61, -1, -20, 6, -34, -9, -2, -8, -1, 0, 0, 30, 6, -18, 19, 3, -7, 14, -11, 6, 15, -14, -4, 11, -2, 7, 15, -2, -2, -36, 16, 11, -69, 8, -21, 13, -49, 9, -3, 1, -3, -10, -14, 22, 8, -19, 22, 18, 8, 25, 9, 4, -1, -10, -24, 13, 7, 23, 4, -3, 26, -40, 4, 10, 
  -22, -2, 28, 44, -111, -5, 14, -16, -2, 12, -3, 22, 6, -88, 40, 34, 6, -23, -19, 9, -14, 0, -3, 9, -48, 38, 4, 0, -11, -10, -7, -17, -38, -7, -2, -3, -16, 15, 15, -9, 8, 15, -11, 0, 1, -30, 9, 18, -8, -8, -44, 18, -13, -3, -33, 11, 19, 15, 11, 5, -7, -1, 6, 0, -6, 4, -14, 2, 11, -1, -15, -6, -16, 16, 0, -62, -14, -13, -27, 10, -10, 34, -29, -47, -7, -4, -3, 7, -10, 5, 2, -17, -41, -10, 9, -26, 9, 12, -25, -47, 66, -15, -14, 2, -2, -13, -5, -61, -15, 23, -77, 34, -6, 16, -2, -92, -11, 1, -31, 1, 28, -113, -12, -2, -69, 12, -3, -30, 
  -19, 15, -6, 10, -66, 7, 12, -1, -2, -10, -12, -4, 7, -43, -11, 3, -10, -33, 20, 3, 13, -11, 6, -12, -19, 32, 10, 10, -16, 4, -12, 8, -17, 6, 15, -17, 1, 12, 9, -5, -4, 11, 4, -22, 12, -4, -2, 25, 1, 11, 16, -30, 3, -3, 38, 7, 18, 6, 17, 17, -20, -13, -5, 39, -13, -11, 8, -14, -43, -8, -5, 6, -2, -15, -15, 1, 8, -13, 6, -9, 0, 2, 13, -4, -4, 4, 15, 10, 3, 0, 16, 5, 1, 7, 3, 1, -4, -9, 14, -8, -68, -16, 5, -2, 8, 1, 13, -21, -4, -37, 35, -10, 15, -23, 21, -6, -8, -3, 53, -2, -14, 8, 13, -1, 2, 7, 4, 1, 
  -64, -15, 16, 9, -31, -13, -12, 6, -3, -14, -5, 12, -8, -49, 21, 3, -4, -2, -7, 6, -15, 16, -27, -7, -54, 0, -3, 2, -10, -88, 16, -5, -40, -12, 24, -17, -38, -6, 1, 0, 14, 10, 16, 2, -3, -36, 21, 10, -9, -14, 24, -14, 16, 2, -102, 16, -12, 27, -1, -8, 22, -85, 13, 4, -7, -3, 18, 5, -25, -6, 14, -2, -9, 14, 2, -6, -3, -22, 19, 8, 9, -13, -10, -9, 1, -3, -16, 2, -22, 18, 10, 3, 45, -80, 3, 18, -92, -9, -4, 7, -23, 11, 0, 1, 4, -12, -5, 7, 2, -18, 32, -2, -15, -6, -4, -27, -13, -10, -79, 8, -22, 15, 11, 12, -18, -110, 0, 41, 
  -35, -6, -25, 2, -13, 1, -5, 4, -13, 10, 7, -6, 4, -8, -5, 20, 9, 14, -9, 15, -13, -5, 20, -18, 29, -26, -11, 17, -25, -28, 15, 38, -5, 16, -27, -22, -28, -5, -10, -7, 9, -4, -16, -17, -5, 5, -33, -9, 4, -6, -17, 1, -8, 5, -61, -19, 20, -49, -5, -2, -34, -5, -1, -23, -20, 13, 5, -9, 46, -7, 5, -1, -3, 2, 12, 1, 8, 14, -6, 26, 15, 34, 4, -18, 1, -11, -14, -3, 26, -22, -3, 2, -27, -12, 4, -7, -18, 9, -26, -18, 25, 12, 16, 12, -15, -8, -1, -10, 12, 27, -16, 6, 12, 16, 71, -5, -7, -1, -36, 5, 19, -18, 15, -5, -21, -1, 5, 0, 
  -16, -14, 13, -15, -41, -3, -10, -17, 16, 6, 5, -11, 11, -34, 16, -5, -13, -74, 1, -22, -11, -13, -54, 6, -65, 35, 11, 9, -14, -28, 11, -9, -48, 8, -7, 4, -6, -10, 2, -10, -11, 16, 10, -7, 12, -12, 3, -5, -14, -45, 17, 21, -4, 7, -37, -5, -23, 33, -1, -4, -17, -17, 12, -15, 14, -4, -25, -20, 16, -11, 16, -18, -14, 0, 15, 37, -3, -6, -4, -10, 5, -47, 7, 11, -11, 12, -40, 11, -16, 10, -10, 0, -36, -21, 9, 23, 50, -6, -18, -16, 37, -6, 15, 8, 1, 10, 4, 1, 2, 38, -52, 57, -4, 6, 23, -34, -15, -2, -17, 12, -8, -15, -10, -9, -26, 19, -10, 12, 
  -56, -13, 4, -5, -16, 14, 1, 16, -5, -7, -13, 1, -9, -4, -7, 0, -5, 2, 2, 12, 6, -15, -48, -9, 19, 7, -9, 0, 4, -80, 12, 4, -41, -8, -11, -2, -6, 2, 15, -9, 12, 11, -12, 11, 13, 1, 7, 7, 7, -2, -4, 10, -15, 8, -71, 3, 2, -5, 5, 0, 0, -50, 7, 3, -24, 12, -15, -5, -20, -5, -9, -5, -12, 14, 11, 8, 13, 4, -5, 0, 7, -10, 11, -1, 9, -1, -83, -3, 4, 12, 6, -7, 7, -56, -9, 10, -64, 7, -2, -10, -44, 5, -3, -5, 9, -13, -10, 4, -1, -25, 6, 24, 15, 8, -1, 10, 14, -2, -66, 12, 7, 13, -1, 12, -1, -65, 1, 16, 
  26, 6, -16, 21, -5, 2, 5, 4, -2, 3, -14, 13, 2, 6, 2, -25, 17, 29, -7, 16, -11, -15, -22, 3, 29, -20, -6, 1, 6, 4, -13, 3, 1, -1, -9, 11, -3, -13, -5, 7, -3, 11, 4, 15, -2, -5, -13, 3, -6, 15, -16, 23, 15, -15, -22, 10, 35, -43, 14, -6, 26, -14, -3, -31, -6, -11, 14, 13, -14, 10, -14, 18, -4, -8, -15, 22, 6, -44, 20, -26, 2, 14, 5, 0, 6, -7, -64, -12, 27, -9, 13, -3, 7, -25, -9, -25, -22, 11, -16, 14, -69, -15, 3, 5, 13, 5, -13, 32, -6, -61, 39, -30, -6, -3, 33, 18, 0, 16, -33, 6, -29, -9, 7, 17, 24, -30, -5, -3, 
  4, -6, 14, -80, 32, -4, -3, -13, -5, 5, -7, -94, -13, 44, 12, -37, 2, 6, -15, -36, -8, 2, 49, 4, 9, -48, 1, 7, 22, 10, 9, 6, 34, 6, 4, 13, 35, -1, -9, -10, 1, 7, 10, 6, 2, 5, 18, 7, -11, 34, -24, -4, -9, -3, 54, -5, 0, -50, -15, 2, -13, -1, 15, 1, -3, -3, -2, -16, 13, -3, -5, -1, -5, -4, 4, -1, -12, -8, -7, -19, 4, -13, 11, -9, 8, -10, 11, 10, 11, -23, -15, -10, 3, 0, -11, -7, -16, 6, -11, 42, -64, 3, 5, 5, -8, 12, -2, 1, -9, -18, -17, -40, -14, -5, 10, -50, -9, -15, 15, 2, 10, 13, -3, -16, -11, -19, 7, -15, 
  11, 6, -18, -8, 12, -11, 0, 3, 13, -4, 5, 2, 13, 6, -36, 20, -16, -29, -41, 0, 6, -5, 19, -11, -7, -7, 7, 2, 25, -7, 12, -15, 2, -9, -2, 7, -6, -13, -11, -2, 5, -6, 10, -8, 3, 14, -33, -7, 11, 23, -5, -12, -1, 5, 22, -11, -18, -24, -7, -9, 18, 2, -4, -6, -23, 10, -12, 13, 14, -15, -11, -6, 8, 0, 9, -17, -12, -3, -31, 20, 11, 0, -25, -18, 15, 11, 19, -9, 19, -45, 7, 4, 5, 0, 14, -11, -15, -11, -31, 4, 28, 2, -8, -3, 8, 2, 10, -7, -13, 16, -55, 16, -6, 20, -44, -13, -5, -6, -10, -11, 10, -14, 0, 10, -12, -2, -3, -23, 
  -37, 7, -9, -5, -37, -13, 14, 8, -7, -9, 0, -13, -6, -28, -58, -29, -10, -46, 4, 7, -8, -1, -76, 8, -42, -32, 1, -4, -5, -19, 2, -4, -41, -14, -3, -30, -29, 5, 9, -8, 9, 8, -9, 2, 6, 6, -42, -50, 0, -23, -16, 6, -1, 7, -74, -1, -40, -15, -10, -14, -19, -3, -6, -13, -53, 9, -8, -3, 30, -14, 4, 7, 2, 0, -15, -3, 9, 62, 1, -2, 3, -14, 24, 3, -13, -10, 30, 19, 3, 14, 4, -2, -10, 38, -14, 4, -14, 1, 22, 2, 24, 11, -9, 3, 5, 10, -7, -3, 4, 17, 14, 13, 12, -23, -15, 16, -3, -14, 46, -8, -22, 17, 2, -18, 1, 18, -1, 24, 
  -48, -7, 1, -4, 7, 7, -15, 2, 11, 4, 0, 15, -4, -10, 5, -8, 13, 35, 20, 0, -10, 4, -33, -18, 6, -2, -13, 5, -11, -71, -12, 30, -19, -18, 3, 19, -17, 13, 6, 6, -6, -15, 9, 0, 16, -27, 1, 8, -5, 16, 3, -9, 13, -5, -38, -17, 12, -8, 8, 8, 13, -28, -12, 1, 0, 9, -9, 7, 30, 11, -5, -18, -14, -11, 14, 25, 5, -2, -11, 11, -12, 0, 16, -11, 13, -15, -31, -17, 16, 0, 1, -4, 12, -25, 5, -6, -28, 12, -1, 11, 54, 10, 1, 5, -8, -12, 6, 21, 9, 16, 4, 22, 12, 28, 18, -5, 1, -5, -66, -14, 7, -4, 5, 1, -2, -30, -7, 34, 
  -6, -15, 5, -18, -14, 11, -3, 8, -6, -14, -9, 5, -3, -15, -4, 6, -9, -6, 7, -12, -10, -6, -9, 2, -18, -8, 5, 19, 9, -19, -4, -12, -3, -4, -14, -15, -13, 4, 11, 6, -11, -12, 4, -21, -15, 9, -1, -13, 13, -2, -6, -19, -14, -13, 5, 3, -6, -3, -11, 11, 6, 9, 10, -4, -7, -4, 3, 4, -2, -11, 0, -9, 9, 0, 15, -11, 13, 8, -6, -7, 9, -19, 3, -7, -11, 5, -8, 6, -12, -18, -2, -3, -1, -18, 6, -5, -8, 14, -3, -15, -21, 12, 14, 8, -8, -6, 0, -2, 11, 9, -2, -5, 10, -5, -16, -7, -1, 3, -7, 7, -14, -15, 9, -13, -6, -5, 2, -1, 
  0, 0, -21, -26, -5, 3, 14, -16, 13, 9, -11, -13, 0, -20, -84, 40, 1, 26, -31, -14, 10, -4, -25, 6, 46, -6, 3, 11, 19, 12, -5, -72, 17, -7, 0, 14, 0, -10, -11, 14, -5, -5, -1, -5, -5, -43, -20, -51, -19, 46, -38, -9, 14, -3, -40, 6, 41, -8, -15, 2, -4, -2, 8, -40, -9, -7, 4, -11, -63, -14, -3, 3, 2, 8, 1, -11, 3, -75, 10, -35, -1, 7, -40, -27, 8, 13, -17, 4, -20, 22, -16, -12, -1, -2, 13, -52, -20, 1, 4, 12, -54, 2, 8, 7, 0, 11, 2, 10, 1, -95, 58, -26, -16, -37, -61, -11, -15, -7, -32, -2, -16, 20, 7, -10, 36, -4, 14, -61, 
  28, -1, -3, -19, 30, -15, 7, 0, -3, -11, 11, -30, -6, 39, -42, -45, 12, -15, -18, -27, 13, 11, -11, 2, -14, -6, -2, -9, 1, 19, 2, -7, 19, 0, -1, -11, 23, -4, 14, 3, 1, -15, 11, -44, -4, 19, -32, -26, 6, -14, 18, -50, 13, 3, 17, -13, -4, 4, -15, -19, 12, 9, 4, -18, -8, 11, -1, -2, -15, -6, -13, -2, 14, 7, 7, 0, 15, -2, -24, 14, 3, -9, 6, -15, -6, -6, 5, -11, 15, 0, -8, -15, 10, -4, -6, 11, 40, -12, -11, 13, -30, -1, 13, -4, 2, -7, -15, -41, 12, 4, -26, 16, -19, -47, -63, -27, -12, 0, 36, -13, -40, 2, -18, 7, -21, 15, -4, 31, 
  -21, -1, -17, 0, 8, -7, 8, -7, -1, -1, 12, -40, 11, -14, -19, 46, 1, 9, -19, -43, -13, 5, -26, -5, 8, 1, 16, -14, 35, 5, -5, -14, -12, -14, -18, -6, -4, 16, 1, 12, 13, -4, -11, -33, 16, -1, -24, -5, 12, 45, -8, -60, -15, -7, -28, -6, 29, 10, -8, 8, -43, -8, -15, -9, 4, 0, -21, -42, -9, -10, 5, 12, -15, 12, 14, -31, 14, 9, -33, 19, -8, 11, -13, -37, 6, -4, -7, -16, 27, -6, -6, -16, -21, 19, 0, -26, 28, -2, 8, -27, -1, 12, 8, 13, 3, 2, -7, -8, -9, 4, -39, -24, 9, 39, -27, -16, -7, 12, 11, 6, 13, -31, -12, -7, -12, 9, 11, -11, 
  -26, -15, 14, -13, -22, -10, 6, -14, 13, 6, 3, -16, -8, 28, 1, -17, -4, -74, -6, -11, 1, 15, 35, -4, -21, 7, 15, 7, 18, -6, 12, 42, -28, -1, -6, 0, -49, -11, -7, 5, 3, 14, -5, -6, 8, -41, -47, -7, -2, -56, 28, 15, -5, -14, -31, 1, -47, 11, -11, -8, 2, 4, 1, -17, -3, 9, -11, 0, -50, -14, -2, 12, -6, 12, 15, 44, -6, -11, -10, 22, -2, -18, 60, 24, 7, 6, 0, -11, 7, 12, 18, 6, -6, 1, -15, 8, -6, 0, -36, 0, -46, 3, 1, -12, 9, 2, 11, 15, -16, -4, -26, 25, 2, -2, 127, 27, 7, 7, -1, -12, 22, 6, -11, 18, -6, -3, -3, 20, 
  -6, -3, 8, 2, 22, 1, 12, 5, 15, -2, -15, 15, 6, 4, 9, -5, -6, 12, -13, 15, 15, -11, 3, -17, 21, -19, -10, 7, 16, -2, -2, 10, -29, -7, 6, 20, 1, 8, -3, 13, -9, 10, 11, -2, -2, -20, 14, 25, 18, 15, -11, 1, 3, 7, -30, -2, 6, -5, -11, 19, 0, -23, -3, -3, -37, 8, 0, 34, 14, 7, -5, 6, -10, 14, 0, 39, -9, -30, 28, -12, -5, 20, 19, 20, -12, 7, -15, -1, 36, 7, -12, -7, 20, -15, -4, -15, -20, 6, 10, 5, -62, -1, -4, -15, 0, -4, 14, 19, 7, -28, 46, -12, -10, -9, 36, 18, 14, 7, -59, -5, 0, 37, -10, -12, 31, -22, -2, -41, 
  -9, -1, -34, -12, 10, -4, -10, -12, -2, 6, 5, -41, 4, -16, -15, 21, -5, 34, -22, 12, -14, 11, -17, 15, 12, -5, -8, 11, 19, -1, -8, -17, -10, 1, -29, 16, -3, 12, -13, 1, -14, -13, 10, -42, 2, -10, -14, 51, -12, 16, -1, -65, 10, 4, -8, 16, 19, -39, -9, -9, -40, 2, -14, -11, -1, 8, -9, -46, 3, -13, -4, -12, 14, 0, -6, -50, -9, -9, -52, 4, -2, 22, -31, -49, 7, 5, 2, 11, 38, 12, -13, 13, -27, 21, -8, -27, 20, 5, -25, -34, 22, -6, 4, -7, -10, 3, -8, -32, -14, 0, -49, 68, 6, 15, -8, -52, -12, 9, -4, 5, 36, -27, -15, -7, -43, 9, 6, -16, 
  -10, -9, -3, -6, -36, 15, -8, 10, 16, 16, -5, -6, -6, -25, -16, -32, 16, -49, -35, 1, 16, -9, -27, 3, -42, 8, 9, 3, -25, -6, 1, 42, -17, 8, 2, -6, -32, 12, -2, 14, -1, -5, -6, -12, 0, 0, 6, -31, -12, -30, 13, 9, 11, -16, -20, 9, -18, 4, -2, -1, -2, -2, 4, 1, 0, -4, 10, -23, 11, 6, 2, 13, -8, -15, -11, 17, -6, 31, 31, 1, 9, -16, 32, 7, -2, 7, 22, -11, -3, 1, -4, -7, 1, 8, 11, 35, 9, 13, -11, -16, 28, 13, -16, 6, 1, 10, -5, -9, 1, 30, 7, -12, 3, -32, 58, 1, 3, 7, 16, 10, -2, 9, 8, 9, 11, 1, 10, 9, 
  17, -19, 7, 15, 44, 2, 13, -4, 4, 8, 13, 9, 6, 57, -9, -24, 1, -25, 8, 4, -9, 2, 24, -13, -38, -10, 3, -1, 10, 8, 0, 17, 29, -8, -5, 7, 18, -12, 9, 12, -5, -3, 8, -1, -12, 16, -16, -11, -3, -28, 0, -6, 5, 4, 33, -6, -21, 7, 12, -15, -14, 9, 7, 19, 17, -6, -1, 0, -25, 13, 7, 9, 3, -12, 3, -44, 14, -9, -24, -1, -18, -29, -34, -30, 4, 16, 15, 7, -11, 25, -2, 11, 2, -12, -3, -14, -2, 12, -23, -19, -26, 10, -3, 10, -16, 1, 0, -29, -11, 27, -47, 12, 0, -28, -11, -21, 3, 5, 39, -11, 3, 5, 8, -11, -6, 25, -6, -59, 
  -4, -1, -18, -4, -18, 3, -4, 4, -3, 11, 15, -5, -7, 3, -6, -1, -4, -18, -19, -20, -7, -1, -16, 9, -8, 5, -5, -9, -1, -14, 11, -20, 6, 8, -12, -12, -8, 12, -8, 0, 13, -8, -9, 7, -11, -7, -17, -17, -1, -14, -12, 10, -5, 3, -13, -5, -18, -26, -20, -4, -15, 7, -7, -25, -8, -5, -4, -10, 6, 2, -2, -13, 9, 3, 15, 7, -2, -3, -14, 4, -12, 8, 5, -6, -12, -9, -3, -3, -23, -16, -2, 11, 2, -16, -14, 5, -1, 7, -12, 6, -12, 11, -7, 12, -16, 15, -4, 0, 1, 3, -6, -29, 4, 11, -6, 4, -1, -5, -12, -11, -3, -5, 4, -12, 6, -2, 5, 3, 
  14, 13, 14, 15, 24, 5, 14, -10, 10, 13, -3, -11, -13, -25, 22, -5, -3, 18, 6, -7, -2, 13, 36, 0, -13, 4, -11, -2, -2, -20, 15, 0, -15, -18, 3, -6, 17, 16, 1, 7, 2, 15, -5, -2, -3, -20, -22, -2, -13, -20, -5, -23, -14, 6, 43, 4, -22, 1, -4, -8, -11, -16, -11, 7, 1, 9, -11, -15, 35, 11, -13, 4, -7, 8, 4, 8, 1, 0, -50, -35, -8, 2, -11, -17, -10, 16, 10, 0, 0, -1, 13, -16, 2, 9, -15, 0, 20, 10, -28, 16, 86, -4, 4, -19, 0, -6, -5, -5, 0, 74, -43, -8, 5, 32, -42, -12, -10, -6, -15, 9, -3, -25, 11, -12, -12, 28, -2, -6, 
  -26, -7, -29, 28, 3, 8, -16, -19, 9, 10, -11, -19, -14, -18, -19, -14, 5, -13, -13, -20, 4, 13, -27, -13, 3, -19, -14, 5, -31, -16, 0, -5, -72, -7, -22, -22, 14, -11, 5, -10, -13, 4, -5, -13, 7, -34, 2, 22, 3, 12, 3, -15, -8, 12, -25, -17, 9, -6, -10, 16, 2, -49, -15, 0, -51, 9, -9, 2, 25, 12, 10, -10, -1, 0, -3, 4, 6, -3, 27, 26, -1, 14, -1, -5, 10, 16, -36, 13, -14, 20, 11, -4, -2, -40, 12, -5, -19, 12, -43, -21, -16, -1, -9, -2, -7, -3, 8, -3, 2, -13, -17, 5, -15, -12, 2, 13, -3, -4, -21, -3, -15, 42, -2, 15, 15, -5, 6, -2, 
  -53, 7, -16, -11, -14, 7, 15, 9, -11, 0, 6, -2, 15, -3, 11, 24, 12, 33, 12, 7, -8, -13, -39, -4, 22, 32, -13, 5, -17, -15, -5, 20, -29, 16, -10, -22, -52, -5, -15, 4, -3, -10, -9, -7, -1, 10, -6, -6, -10, -15, -3, -7, -6, -4, 47, 9, 1, 4, 13, -4, -7, -8, -3, 50, 1, -9, -14, -3, -18, -5, -13, -3, -9, -6, -6, 11, -9, -6, -19, -15, -2, 1, 19, 6, 15, 11, -72, -4, -1, -1, 16, -10, -19, 10, -10, 8, -50, 0, -15, -8, -31, 7, 0, 4, -1, -7, -5, 13, 13, 4, 19, 21, 18, -8, 26, 6, 1, -7, -63, -1, -5, 13, -7, 10, -5, -7, -13, 37, 
  -53, -10, -32, -14, -5, 7, 4, 4, -14, -14, 14, 10, -1, -10, -21, 0, 0, 12, -26, 19, 13, 5, 0, 0, 15, -10, 5, 17, -22, -35, -9, 40, -6, -10, -20, -14, -27, -7, 2, -14, 16, -14, 16, -15, 11, -13, -27, -1, -4, 7, -9, -8, 2, -3, -37, 9, 20, -15, 1, 15, -15, -14, -14, 10, -23, 2, -4, -10, -9, 5, -8, -5, -6, 4, 10, 4, 7, -26, -17, 2, 13, 6, -16, -5, -15, -4, -53, -4, 1, -16, 19, 14, 4, 12, 4, 13, -50, -9, -3, -8, -18, -5, -4, -2, 11, 6, 1, -20, 0, 13, -25, 6, -16, -4, 72, 11, -7, 6, -48, -8, 19, 21, 12, -8, -1, -44, -2, 8, 
  25, 0, -11, -70, 28, -14, 12, -14, 2, -9, -10, -76, -10, 27, -31, -22, -19, 32, -9, -2, -6, -8, 41, 9, 13, -59, -1, 7, -51, 0, 2, 10, 25, -3, -13, -48, 15, -8, 12, 10, 16, 3, 13, -45, 0, 17, -10, 13, -11, 28, -19, -8, 12, -11, 9, -4, 7, -47, -6, 2, -31, 4, 13, 13, -10, -2, 5, -40, 30, -3, -6, 3, 9, -2, -14, -10, 9, 17, 20, -45, -16, 22, 2, -10, -6, -4, 23, 13, 3, -17, -19, 3, -23, -21, 15, 14, -24, 6, 10, -40, -20, 0, -13, -10, 6, -6, 9, -12, -2, -14, 9, 22, -4, 29, 0, -15, -4, 2, -8, 11, 7, 7, 10, -15, -12, -36, 13, 5, 
  34, -4, 20, -10, 59, -15, -10, 8, 0, -11, 4, -10, -13, 26, -1, -62, -6, -21, -18, -18, -9, 3, 39, -18, -29, -11, -11, -7, -36, 8, 3, -41, -23, -13, 1, -19, 2, 11, 9, -14, 14, -5, 8, -2, 11, -3, 7, -38, -15, -20, 14, -47, -11, -3, -39, 6, -11, 10, 4, -2, 11, 10, 11, -70, 2, -18, -9, 14, 42, 14, 11, -3, -13, -11, -13, 1, 14, 21, 4, -16, -2, 13, 2, -8, 16, 8, 37, -5, 5, 16, -5, 5, 12, 5, 14, 20, 11, -6, -17, 28, 41, 4, 5, 5, 0, -15, -6, 7, -13, 37, -23, 3, -15, -6, 5, -18, 14, -15, 43, 7, -7, -11, -3, 13, -4, -9, -4, 37, 
  19, 10, 1, -28, 6, -13, 1, -5, 2, 16, -16, -6, 11, -14, -64, 38, 16, 51, -34, 2, 14, 6, -37, 9, 54, -8, 15, 5, 16, 24, -7, -48, 6, -8, -24, 1, 2, 4, -7, 16, 0, 7, -8, -10, -10, -25, -48, 8, -16, 48, -50, -12, 0, 8, -28, 13, 37, -16, 10, 10, 3, 8, -10, -55, -11, -15, 13, -15, -2, 16, -14, -1, 4, 4, 4, 24, -13, -27, 4, -19, 15, 51, -62, 3, -1, -11, -44, 15, 41, 0, 5, -11, -2, -2, -6, -38, -2, 12, 5, 14, -18, -12, 14, 5, -10, 14, -10, 17, -7, -32, 7, -15, 6, 24, -61, 15, 5, -12, -23, 5, 16, 4, 14, -5, 22, -4, -14, -25, 
  -23, 5, -7, 0, -6, -14, -7, 13, 12, 1, 11, 15, 11, 29, -55, -42, 8, 16, 8, 0, 1, 8, -20, -7, 20, -40, -17, 4, -32, -12, -7, 4, -13, -3, 2, -14, -11, 2, -12, -10, -11, -11, 9, 1, 12, -13, -54, -31, 2, 10, -41, -7, -4, 7, 27, 16, 17, -23, 4, -7, -21, -12, -13, -5, -13, -14, -19, -24, -25, -10, -2, 6, 3, 1, -10, 7, -4, -13, -22, -22, -9, 11, 8, -6, -13, 9, -68, 3, 19, 9, 10, 11, -12, 0, -8, -37, -40, 8, -18, -3, 36, 3, 3, -10, 14, -9, 5, 12, -3, 30, 2, 29, -1, 34, 66, 26, -9, 1, 5, 0, 40, -3, 11, -12, -7, -41, 3, 39, 
  -10, -6, -2, 21, -44, -2, -7, 12, -11, 14, -2, -37, -3, -69, -6, -22, 3, 21, -4, -42, -10, 0, -1, -4, -42, 9, 2, -8, -36, -4, -1, -26, -50, 10, 15, -46, -26, 1, -12, -1, -10, -14, 12, -20, -16, -41, 41, 8, -1, -26, -39, -51, -15, 15, -11, -4, -8, 26, -2, -1, 34, -5, 10, -16, -28, -15, 25, 6, -69, 5, 7, 7, -4, -10, -10, -13, -2, -54, 31, -41, -5, -3, -21, -26, 8, 5, -18, -4, -22, 36, -2, -12, 9, 2, -10, -57, -2, -10, -24, 23, -26, 14, 10, -18, 5, 5, 5, 22, 9, -17, -20, 0, -10, -34, -37, 51, 6, -11, -18, 12, 49, -29, 6, -8, 30, 31, -2, -55, 
  30, 3, 1, 25, 13, 10, 15, 0, 4, 14, 15, 24, -12, -3, -3, -54, 4, 9, -28, 4, -11, 5, 0, -3, -14, -9, -7, 3, 24, 22, 9, -111, -5, -15, 9, 11, -10, -1, -10, -8, 0, -6, 14, 2, -2, -44, -3, -11, 7, 4, 12, 7, 0, -9, -20, -11, -8, 3, 10, -7, 23, 6, -3, -56, -36, -3, 5, 14, -52, -15, -4, 13, 1, -14, -10, 13, 5, -79, 11, -19, -15, 7, -4, 7, 3, -15, 2, -11, -8, 15, 6, 2, 29, 7, -9, -38, -26, -3, 5, 19, -46, 16, 15, 9, -1, 3, -10, -4, 7, -46, 42, -29, 0, 11, -13, -4, 2, -12, -46, 2, -13, 36, -8, -12, 35, 11, -1, -64, 
  4, -1, 5, -37, 36, 0, 9, 11, 12, 6, -6, -30, 13, -56, -4, -4, 14, 27, -3, 19, -4, 7, 30, -7, 30, -4, -3, 1, -53, -14, -13, 22, 27, -2, -16, -25, 29, 14, -10, -16, -2, 0, 5, -39, 2, 29, -16, -1, -3, 25, 18, 5, 12, -8, 19, 1, 10, -18, -4, -3, -53, 9, -2, 30, 39, 3, 19, -77, 29, -8, -9, -4, 4, 2, -4, -41, -8, 23, -13, -5, 0, 36, 5, 29, 1, 14, 41, 14, -3, -33, 3, -1, -53, -5, 0, 13, 20, 19, 9, -56, 47, 5, -13, -16, -3, -16, -15, -63, -1, 9, -2, -8, -13, 12, 8, 9, 13, -11, 60, -7, -6, -30, 3, 1, -49, -16, -11, -1, 
  -30, -1, 8, -3, 0, 12, -8, 11, -2, -10, 16, -20, -3, -19, 18, 24, -5, 10, -43, 8, -12, -4, 8, 11, 17, -11, 7, -19, -6, -31, 8, 63, -6, 8, -12, -15, -66, -7, 7, -9, -2, -14, 3, -23, 15, -27, -38, 5, -18, -20, -7, -5, -1, 8, -17, 11, -46, 11, -3, 5, -38, -17, -9, 6, -16, -5, -7, -35, -26, -12, -13, 3, 13, -7, 3, -38, -16, -44, -23, -21, -14, 10, 18, -1, -7, -11, 4, 7, -28, -17, 6, -14, -34, -2, 14, -7, -23, 2, -17, -40, 13, 10, 14, -10, -1, 11, 0, -74, -11, 8, -21, -19, 1, -10, 12, 15, -3, -5, 1, -14, 15, 10, -16, -13, -11, -5, -8, 1, 
  -5, -13, -11, -75, -16, 10, 7, -18, -14, 1, 14, 7, 12, 9, -23, 24, 14, -13, 24, 1, 13, -1, -12, 5, -1, -6, 1, -6, -63, 3, 10, -15, -5, 4, -4, -74, -26, 12, -1, 6, -15, 10, 9, -25, -6, -18, -28, 1, -11, -21, 16, 21, -3, 12, -10, 8, -13, -10, 4, -12, -67, 2, 3, 24, 14, 15, 6, -49, -19, -11, -12, -7, -13, 12, -4, -46, 16, 24, -29, -35, 13, -63, -9, 18, 14, -2, -28, 2, -46, -1, 2, 3, -67, 5, -5, -14, -1, 10, 3, -82, -6, -13, -10, -13, 11, 15, -14, -65, -1, 8, -8, -37, 2, -98, 15, 5, 12, 6, -22, -3, -84, 8, -2, 15, -50, 1, -2, -35, 
  -82, 0, -11, -11, -10, -5, -3, 12, -1, -14, 2, 3, -7, 17, -15, 7, -17, 16, 10, 5, 13, 11, -40, -18, 1, 6, 11, 16, -14, -60, 7, 17, -38, -12, -8, 9, 2, 10, 12, -12, 16, -15, -14, -8, -13, -3, -3, 20, -6, -9, -4, 18, 14, 11, -28, -12, 6, -6, 14, 15, -13, -47, 0, 29, -22, -1, -14, -13, -30, -4, 5, -12, 13, 11, 7, 2, 15, 5, -8, 6, -13, -26, 12, 13, 0, 8, -88, 3, -16, 4, 8, 18, 7, -9, 9, 33, -65, -14, -34, 1, -46, 4, -3, -16, 10, -15, 1, -6, -8, -10, -16, 24, 9, -30, 11, 26, 9, -4, -91, -5, -14, 7, -5, 0, -14, -36, -12, -2, 
  -1, -11, -17, -35, 42, -11, -1, -10, 2, 11, -3, -31, -13, -14, -19, 4, -11, 22, -8, -13, -7, 16, 32, -10, 47, -45, -2, 8, -26, -8, -14, -20, 10, -12, 4, -11, 3, 12, -8, 9, 14, 12, -10, -12, 2, 16, -14, 23, -14, -3, -10, -15, 5, -14, 0, -13, 11, -13, -10, 0, -15, -14, -10, 7, 5, -1, 7, -20, 37, -3, 8, 9, -11, -4, 13, -19, 1, 15, -33, 7, -13, 2, -23, -53, 12, -5, 5, 9, 23, -46, 14, 7, -23, 10, -15, -16, 17, 9, -5, -29, 37, 9, -3, -8, 14, -1, 0, -14, 17, 30, -20, 4, 11, 40, 53, -50, -14, 6, -27, 11, 24, -16, 9, 17, -35, 8, 7, -12, 
  13, 7, 3, -25, 8, -12, 15, -7, -14, 4, 12, -16, 11, 12, -5, 6, 8, 23, -11, -20, -15, -13, 61, -1, 20, -1, 14, -14, 8, 32, -5, -13, 0, -16, 18, -20, 28, 4, 0, -5, 5, 5, -13, -10, -6, 0, 6, -6, -16, 10, -2, -33, -1, 0, 65, 16, 5, 2, 10, -17, 9, 13, 1, 14, -3, 5, -5, -17, 10, -5, -6, -9, -10, 11, 15, 3, 8, 1, 12, -16, 4, 4, -3, -4, -11, 11, 105, 4, -13, 6, -9, 12, -20, 13, -9, 19, 9, -7, 5, -16, 12, -12, -6, 0, -7, 16, 6, -12, 7, 34, -3, 10, -20, 10, -15, -22, -2, 1, 109, 12, -1, -1, -6, 13, -22, 39, -4, 16, 
  40, 10, -7, -2, -15, 15, 0, 7, 5, 10, -1, 3, 5, -4, -14, -21, 5, 29, -10, 4, -1, 12, 6, 9, 20, -30, 3, 7, 17, -5, 3, -22, 24, 5, -22, 4, -15, -4, -9, 15, 4, 7, -4, 12, 4, -7, -50, 1, 9, 20, 7, 9, -13, 15, 18, -11, 13, -71, -7, 9, -5, 5, -16, -7, -14, -3, -12, 6, 16, 7, -5, 10, -11, 9, 4, 27, -14, -10, -31, -48, 10, 23, -6, 12, 13, -10, -18, -5, 37, -52, -1, 2, -15, -8, -14, -28, 1, 7, -19, 34, 6, -3, 7, 6, 6, -2, 8, 25, 2, -6, 5, -38, 7, 22, 4, -11, 4, -14, -7, 0, 43, -31, -9, 8, -1, -17, -1, -19, 
  -81, 9, -6, -19, 16, -4, 16, 9, 0, -8, -9, 1, 13, -40, 32, -11, -9, -25, -6, -5, -15, 15, 2, -11, -12, 16, 12, -1, 11, -31, -16, 22, -63, 0, 11, 3, -30, -3, -1, -7, 9, 15, 13, -3, 16, -32, 21, 11, -5, -47, 12, 21, 7, 5, -12, -15, -25, 2, 17, -2, 22, -1, -8, 2, -52, -11, 21, 24, -49, -9, 11, 10, 9, -15, -7, 23, 12, -39, 42, 4, 11, -49, 12, 5, -7, 7, -5, 10, -24, 16, -12, -7, 17, -7, 4, 0, -31, -7, 11, 14, -42, 11, -15, 9, -12, -5, 11, 26, -5, -25, 29, 10, 15, 14, -2, 7, -7, 16, -10, 8, 4, 8, 17, 14, 22, -1, -2, 13, 
  -32, 11, 6, -31, -65, -6, -11, -2, 13, -8, 11, -3, -6, -46, 25, 3, -6, -45, -10, -33, -8, -7, -12, 8, -14, 37, -3, 11, -7, 1, 11, -41, -8, -13, -4, -19, -44, -2, -7, 6, -8, -7, 7, -8, -15, -26, 22, -15, -1, 1, -17, -2, 7, 12, -17, 12, 0, 3, -4, -12, 19, 6, 8, -49, 5, -3, -18, 13, -42, -4, 7, -1, 9, -2, -9, 10, 6, -22, 23, -38, 2, -3, -22, -10, 2, -7, -39, 8, 4, -4, -1, 5, 8, 8, -7, -48, 18, 6, -36, 12, 18, -14, 12, -8, -6, -13, -1, 15, 5, -12, -19, -17, -19, 51, -49, 8, -5, 7, -22, 16, 16, -29, 7, 9, 28, 16, -14, -68, 
  -52, 6, -6, -12, -13, -5, -2, 11, 10, 13, -14, -6, -6, 43, 1, -5, -7, 7, -3, 11, -15, 4, -30, 11, 4, 20, -11, 2, -1, -27, -13, 1, -39, 15, -8, 2, -24, 11, -7, -11, -7, -3, -11, 7, -11, 27, 15, 29, -9, 3, 2, 2, 5, 11, -9, -4, 19, -9, -8, 3, -10, -23, -6, 19, -18, 16, -2, -8, -54, 13, 9, 3, 1, 3, 2, 7, -4, -4, -18, -6, 15, -8, 13, 2, -7, -13, -60, -4, -2, -2, -6, -10, -16, 1, 0, 32, -43, 6, -2, -10, -48, -15, -14, 15, -15, -16, 12, 9, -16, 3, -15, 29, -4, -21, 25, 14, 11, 4, -79, 13, -19, 14, 6, -9, -11, -20, -16, -11, 
  16, -5, 13, 11, -32, -12, 8, 8, -15, -7, -6, -1, 6, -6, 17, -41, -12, -19, -7, -16, -13, -8, 60, 15, -21, -3, 9, -5, 5, 5, -4, -35, -24, -3, 9, 6, -30, 5, 14, 10, -6, 0, -4, 2, 10, 4, 22, -2, -15, -11, -21, -14, 1, -4, 56, 15, -8, 12, -12, -6, 7, -11, 9, -35, -18, 4, 5, 17, -3, 6, -14, -6, -2, 12, 2, 9, 13, 5, 7, -35, 1, -2, -16, -12, -8, -13, 64, 5, 15, 13, 9, -19, -2, -6, 5, -20, 25, -7, 13, 33, 0, 6, 14, 0, 4, 15, -8, 12, -18, 23, 19, -69, 3, -8, -35, 4, 1, 10, 20, -1, 0, 11, -16, 12, 29, 10, 9, -67, 
  -19, 13, -17, -5, -49, -8, -4, 3, -5, 0, 9, 4, -11, -47, 39, -9, 11, -18, -14, 1, -4, 11, -13, -1, 7, 24, -17, -5, 11, 16, -3, -69, 11, -10, -16, 4, -28, 3, 0, -11, 11, -10, 11, 12, 9, -11, -12, -52, -17, -18, 18, -1, -12, -7, -44, -5, 18, 17, -1, -9, -1, 9, -2, -84, 34, 3, -35, 31, -50, -13, -5, 6, 15, -7, 2, 1, -5, -21, -12, -25, 11, 13, 7, 27, 8, -8, -23, -9, -4, -33, 12, 1, 9, 4, 14, -37, 33, -5, -24, 20, -3, 14, -14, 7, -7, -6, -6, 4, -7, 0, 0, -50, 15, 5, 9, 16, 8, 15, -16, -7, 21, -36, 1, 6, 0, -2, -4, -23, 
  -12, -6, -5, 12, -31, -11, 1, 5, -15, 9, 9, 27, -16, -50, -12, 0, -3, 29, -3, -9, 8, 7, 30, 13, 9, -8, -16, -6, -17, -1, 13, 21, -17, -3, -12, 4, 0, -13, -4, -3, -16, 8, 10, 11, 6, -7, 4, -16, 3, 45, -44, -8, 15, -8, 9, -1, 9, -8, -6, 3, -1, -25, -2, -1, -29, 10, -2, 12, 3, -7, -9, 11, 15, 1, -6, 35, 7, 6, 36, -20, -13, 23, -42, 20, -7, -10, -37, 11, 18, -6, 9, -2, 4, -34, -7, -38, -27, 11, 12, -12, -42, -12, 10, 10, -12, -4, 12, 4, -2, -36, 40, -55, -8, -6, 17, 55, 13, 14, -42, -12, -11, 15, 15, 6, 23, -30, 0, -53, 
  46, 6, 22, 24, -8, 0, -3, 3, 6, 15, -7, -9, 1, -5, -4, 1, 3, -32, -12, -25, -14, -15, 51, 2, -10, 12, -13, -13, 16, 29, -10, -50, 19, -3, -1, 15, -31, -15, -8, -4, -3, -2, 16, 8, -1, -19, -18, -11, -10, -6, -8, -14, 7, 14, 28, -10, -6, 20, -13, 5, 12, 37, -8, -45, 25, -18, 2, 21, -13, -9, 15, 14, 1, 11, -6, 6, 15, -28, 8, -9, 10, -7, -21, -21, 7, -7, 30, -7, 1, 21, -9, -11, 17, 16, 9, -57, 32, -6, 17, 22, -4, 11, -9, -5, 7, -10, -15, 11, -7, 3, 8, -7, -18, 9, -21, -4, 12, -3, 22, -12, -6, 33, -11, 12, 34, 30, 6, -66, 
  26, -10, -5, -36, 24, 3, 6, -4, 11, 2, 13, -53, -5, 33, -45, -19, 12, 17, -12, 8, 0, 12, 19, 9, 26, -65, -6, 10, -18, 18, -1, -21, -5, 5, 9, -13, 4, 3, 7, -15, -7, 5, -4, -27, 14, 5, -36, 6, -3, 13, -24, -11, 1, 1, 16, 3, 6, -54, 0, 9, -27, 3, 8, -13, -14, -17, -3, -13, -11, 9, -5, 11, -13, 16, -5, -17, -7, -7, -1, 13, -4, 5, -21, -12, 15, 16, 14, 7, 12, -11, -4, -8, -2, -11, 16, 3, -12, -19, 1, -24, 3, 9, 15, -13, -10, -6, -8, -12, -10, 2, -17, -7, -15, 44, 18, 6, 8, 16, 8, -14, 16, 1, 9, 7, 9, -6, -9, -8, 
  -19, 7, 16, -70, 10, 3, 12, -17, 0, -13, 7, -57, -2, -7, 29, -59, -2, -91, -76, -23, 0, 13, -26, -9, -49, 28, -18, 10, 12, -7, 3, -94, -20, -10, 14, -17, 14, 13, -9, -2, -9, 12, -13, -3, -12, 5, 15, -59, -14, -38, 14, -13, 13, -1, -1, 0, -22, 24, 14, -12, 18, 9, -1, -105, -10, 7, 0, -9, 7, -14, -6, -2, -1, 9, -6, 6, 14, 10, 11, -15, -8, -32, -11, -5, 7, 16, 48, -3, 3, 10, -10, -12, 12, -1, -10, 22, 5, 4, -21, -1, 3, 3, 14, -6, 5, 15, -11, 28, 13, -10, -38, 7, -3, 12, 48, -2, 8, -2, 18, -8, 20, -6, -9, 6, 7, -3, -15, -27, 
  -19, 7, 0, 12, -45, 0, -4, -3, 5, -14, -13, -5, -14, -76, 3, -2, 9, 32, -3, 5, 2, -10, 3, 6, 18, 31, 13, 19, -7, -12, 3, 19, 1, 12, 10, -2, 7, 15, 14, 12, 12, 4, 16, 13, 13, -25, -8, -10, 20, 25, 0, -7, 8, 16, -21, 10, 7, 19, -8, 15, -17, -24, -1, -15, 13, 16, 9, 14, -39, -4, -3, 9, 1, -1, -7, 25, 11, -36, 3, -7, 9, 23, 4, 8, -11, 14, -35, -1, 19, -14, 0, -8, 3, -12, 12, -14, 3, -4, -1, 1, -82, -8, 12, -6, 4, 10, -9, 22, 6, -72, 30, -23, 19, 16, 18, 12, -9, 0, -55, -7, -14, 1, -2, -10, 24, -25, 8, 10, 
  -27, 5, 5, 13, 0, 0, 1, 8, -8, -13, 3, -18, 5, -23, 6, 11, -3, -14, 4, 2, -5, 0, 7, -9, -1, -13, 9, 0, -2, -37, 11, 22, -2, 6, -7, -9, 0, -14, 5, -14, 7, -15, 9, -23, -7, -15, 17, -5, 11, -20, 15, -12, 0, 0, 11, 3, -8, -7, 6, -15, -2, -19, 3, 11, -50, -13, 17, 11, 28, -8, 11, 8, -16, 12, 3, 0, -15, -30, 11, 6, -13, -22, -18, -3, 2, 7, 38, 3, -28, 11, 0, -18, -15, -38, 3, 21, -41, -17, 13, 8, 17, -10, 12, 5, 6, -6, 10, -24, -11, -12, 6, 21, -3, 0, 6, -2, 6, 5, 15, -6, 6, -29, 8, -13, -17, -30, 8, 19, 
  -4, 6, 11, 0, -42, 7, -1, -2, -7, 14, 8, 6, -12, -58, 3, 15, -9, 36, 8, 12, -8, 15, 28, -9, 21, 40, 3, -11, -2, -9, -1, 35, 3, 7, -13, -3, -70, -14, -6, -3, 5, -16, 7, 7, -14, -22, 13, -18, -6, 15, 4, 16, -3, 10, -5, 10, 3, 26, 13, 19, 1, -9, 0, 18, -7, -9, -3, 2, -63, -8, 7, 2, -5, -13, 10, 23, -7, -30, 5, -7, -1, -18, 18, 15, -10, 2, -56, -2, -24, 5, -3, 9, 2, -25, 0, -18, -15, -5, 16, -2, -60, -11, -8, 1, -6, -5, -3, 2, -16, -22, 16, -13, -4, -11, 30, 31, 3, 9, -69, 15, -27, -9, 13, -5, 17, -20, -5, 25, 
  -22, 2, -13, 14, -33, 3, 5, -10, -2, 5, 5, 35, 6, -50, 15, 17, -8, 23, -25, 11, -9, 5, -24, -4, -33, 32, 12, -17, -9, -3, 12, -15, -15, -7, -4, 8, -10, 13, 2, -3, 11, -1, 12, 6, -5, -31, 8, 16, -3, -4, -36, 8, 12, 5, -7, -10, -6, -2, -15, 7, -15, -6, 10, -19, -16, 8, -31, -6, 15, -12, 3, 9, 13, -9, -8, -13, 3, 5, -20, 23, -11, 7, -38, -36, 0, -16, 8, -6, 12, -26, 11, 8, -27, 11, 13, -15, 0, 9, -11, -11, 58, 6, -5, 3, -15, -10, -14, -6, 1, 35, -62, 34, 11, 19, 22, -15, -13, 0, -34, 4, 48, -67, -3, -18, -30, 5, -11, -12, 
  48, 16, 11, 12, -6, 10, -3, -10, 7, 12, 13, 11, 7, -12, -14, -33, 9, -36, -9, 2, 15, 12, 14, -15, -7, 1, -2, -5, 8, 56, 8, -102, 27, -8, 12, 4, -17, 7, 7, -5, -13, 12, 13, -1, 15, -2, -22, -17, -2, 2, 11, -10, 7, 14, 44, 9, -4, 16, -3, -4, 0, 26, 13, -26, 16, -14, 4, -3, -4, 16, 16, -11, 2, 3, 2, 2, 9, 8, 4, -4, -4, -2, -4, -11, 16, -14, 25, -15, -1, 37, -3, 10, 5, 27, -8, -36, 26, -4, 23, 14, -10, 14, 10, 9, 12, 1, -11, 16, 13, 2, 6, -5, 11, -12, -12, -9, 12, -16, 0, 9, -10, 28, 5, 4, 2, 50, 5, -38, 
  -34, 5, -44, -54, -33, -12, -6, -7, -15, 3, -10, 0, -12, -48, -48, 34, 11, -9, -1, 15, 13, -10, -4, -4, 13, -3, 10, 8, -57, -20, -4, 25, -7, 8, -43, -45, -30, 4, -13, -4, 2, -12, 5, -40, -6, -52, -92, 13, 3, -12, 25, 10, 10, -11, 7, -3, -7, -9, 12, 7, -47, 7, 1, -40, 20, 0, -8, -41, -11, -4, 13, -5, -3, 4, -2, -34, -1, -6, -55, -7, -2, -59, -2, 1, 4, -5, 8, -4, -48, 11, -14, -2, -36, 17, -4, 29, 29, -1, 23, -34, -4, -5, 7, -10, 4, -14, -12, -59, 16, 60, -40, -32, -15, -62, 18, -4, -5, -2, -23, -7, -67, 14, 7, -10, -49, 10, -3, -31, 
  -21, 4, 4, -15, -16, 5, -15, 8, 13, 8, 1, 10, 2, 13, -17, 13, 2, -38, 6, -32, -9, -14, -36, -10, -39, 42, 15, -13, -21, 10, -14, -44, 2, -11, -21, -21, 9, 15, -12, 4, -9, -3, -8, -6, 2, 34, -14, 8, 2, 26, 27, -5, -5, -15, 2, 9, 18, 7, 3, 16, -17, -4, -1, 21, 5, -17, -13, -30, -50, 10, -5, 0, 6, -2, 3, 13, -11, -7, -29, -4, -2, -13, 36, 4, -10, -7, 6, -8, -18, 6, -11, -2, -5, -3, -15, 21, -9, -8, 18, -15, -39, 9, 10, 3, -7, -16, 15, -11, -6, -3, -14, -47, -9, -102, 39, 17, 10, -11, 5, -8, -88, -2, 15, -1, -15, 2, 13, 56, 
  33, 12, 10, 10, 21, -3, 0, -8, 0, 6, 2, 16, -7, 3, -12, -6, 8, 2, -9, -17, 9, -4, 14, 3, 5, -10, -9, 10, -2, 9, 7, -43, -16, 6, -4, 8, -31, 3, -8, -3, -11, -13, 5, 9, 2, -14, 23, 14, -1, 19, -25, 0, 12, -1, -29, 11, -7, 5, -14, -6, 43, 3, -4, -47, -10, 14, -8, 31, -31, -14, -12, 10, -6, -11, -3, 3, 1, -39, 36, -8, 9, 35, -14, 5, 7, 12, -56, 7, 18, 4, -1, 2, 33, -2, -16, -70, -12, 5, -6, 35, -13, -8, 5, 13, -3, -1, 12, 2, 6, -35, 7, -37, 9, 26, -39, 16, 2, 2, -33, 1, 35, 8, -13, -19, 30, 6, 10, -51, 
  36, 6, -13, -25, 19, 14, -12, 10, -13, -9, 2, -8, -1, 21, -86, 20, -3, -11, -16, -1, -2, 14, 1, -13, 13, -68, -9, -14, 28, 12, 6, 12, 25, 1, -25, 21, 3, 5, -11, -8, 8, 0, 3, 14, 7, 1, -34, 20, -1, 7, -24, 7, -10, -12, -26, 12, -2, -46, 8, -8, 11, 0, 1, -19, -32, -15, 15, 3, 1, 12, 3, 13, -12, 2, 6, -13, 1, 2, 22, 29, -1, -13, -38, -19, 5, -6, -19, 7, -7, 26, -5, -16, 10, 1, 8, -15, -43, 8, 12, -8, -7, 13, -12, 5, -11, 6, -11, -27, -12, -21, -2, 7, -3, 12, -32, -26, 10, -9, -40, -15, 11, 46, 2, -3, -7, -10, -2, -25, 
  -1, -3, -9, -12, 11, 15, 13, 14, -6, 14, 0, -56, 5, 32, -17, -32, -3, -46, 40, -83, -6, -15, -29, 6, -36, 3, -6, 16, 19, -1, 10, 0, 9, 15, -5, 6, 11, -16, -12, -13, -11, 0, 9, 0, -1, -27, -7, -14, -9, -33, -60, -37, -2, 3, 30, 12, -13, 1, 10, -1, 36, 5, -7, 17, -2, 14, -8, 20, 11, 11, 14, -13, 0, -10, 6, -15, -5, 16, -18, -73, 8, -31, 31, -55, 7, -11, -29, 14, -16, 8, 10, 4, 18, 3, -14, -34, 14, 2, -1, 20, -8, -8, -1, -6, -16, 0, 13, -74, 10, 19, -15, 5, -2, -41, 23, -79, -3, 8, 50, 2, -28, 5, -7, -4, -30, -15, 13, 60, 
  52, -10, 5, 10, 23, -5, -13, -10, 4, -13, -1, -14, 14, -11, 10, -7, 8, -10, -14, -8, 5, -12, 51, 1, 15, 5, -9, 7, 2, 56, -15, -3, 12, -10, 17, -4, -6, 13, -2, -4, -3, 9, -9, -19, 6, -13, 13, 1, 4, 3, 12, -19, 1, 5, 73, -1, 4, -6, 11, -5, 9, 43, 1, 6, 17, -6, 2, -1, -32, -9, -15, -3, 11, -14, 11, 9, 2, -17, 1, -10, -18, -3, -15, -3, 16, 9, 98, -11, 0, -6, 3, 3, -2, 22, -9, -4, 67, 7, 14, 20, 5, -7, 13, -12, -3, -2, -8, 21, 6, -5, -2, -8, -10, 1, -13, -9, -15, 14, 90, 8, -3, 20, -2, 8, -11, 57, -9, -35, 
  -17, -5, -21, -66, 1, 8, -5, 1, -4, -5, -2, -95, -14, -2, -94, 25, -5, 4, -55, -20, 11, -14, -28, 12, 24, 10, -3, -9, 27, 12, 3, -44, 14, -7, -8, -2, 15, 11, -5, -11, -4, -8, 1, -50, -12, 3, -93, -54, -16, 15, -28, -14, 7, -3, -18, -11, 13, -9, -8, 7, -28, 7, -6, -30, 15, 7, -7, -25, -56, 13, -2, -10, -7, -3, 4, -13, -13, 5, -42, -86, 1, -28, -22, -6, -6, -6, -33, -7, -33, 22, 2, 11, 29, 14, 9, -21, -11, 6, 2, 3, -47, 3, 8, -4, -12, 9, -7, -25, -7, -7, 16, 38, -17, -33, -97, -30, 9, 1, -14, -4, -40, 9, -8, -17, -13, 3, 5, -20, 
  -15, -7, -11, -15, -5, 9, -14, 0, -14, 12, -14, 5, 11, -12, -5, -6, -5, 1, 2, -4, -5, -5, -12, 9, -2, 10, 0, 15, -4, -1, 5, -3, 3, -15, -12, -6, -6, 15, -7, 10, -9, -8, -11, -2, 4, -4, -19, -10, 3, -9, 2, 5, -12, -6, -17, -10, -16, -20, 15, -12, -16, -5, 0, -27, -20, 12, 2, -27, -3, 11, 7, -18, -9, 10, 0, -15, -6, -20, -27, 0, 2, -4, -3, -7, -3, -11, -5, 8, -2, -7, 5, -9, -19, -15, -4, 8, -4, 16, -16, 1, -17, -14, 10, -1, -13, 0, 5, -25, -16, -7, -14, 1, 1, -30, 7, 9, 1, -13, -3, -3, -8, -16, 4, 3, -5, 1, 5, -15, 
  3, -10, -1, -59, 22, -13, -6, -13, 6, 3, -11, -78, -9, 49, -9, -33, -8, -10, 17, -35, -2, -7, -9, 10, 14, -6, -16, 10, 27, 9, -5, 10, 2, 3, -2, -17, 26, -16, -8, -18, -15, 14, -3, -9, 13, 28, 16, 26, -16, 8, 23, 17, -1, 14, 0, 15, 11, -26, -12, -9, 29, 7, -15, -9, 19, -5, 4, -8, 18, 13, 5, -6, 15, -3, 6, -8, 7, 13, -7, -29, -9, -3, -14, 0, -9, -7, -2, 13, 4, -10, 7, 7, -10, 22, 4, 10, 22, -7, -3, -19, -14, -14, 14, -18, 4, 0, -11, -103, -13, 17, -23, -33, 4, -67, -15, -61, -1, -8, 21, -7, -46, 13, 14, -14, -80, 16, 8, 31, 
  -28, 5, -23, -34, 1, 7, -10, 5, -2, 12, -12, -77, -10, 10, -52, 42, -11, 76, -46, -35, 14, 0, -1, 13, 48, 4, 14, -2, -54, 5, -6, -35, 14, 11, 3, -61, 7, 12, 5, 9, -15, 8, -5, -48, -7, 18, -105, -44, -17, 31, -47, -10, 5, 0, -47, 12, 42, -14, -15, 13, -47, 5, -12, -59, 13, 8, -21, -42, -7, -2, 2, -8, 0, 5, 11, -12, 10, 5, -69, -25, 5, -2, -21, -14, 16, 15, 5, 12, -12, -8, -11, -3, -9, 5, 10, -29, -1, -11, 4, -9, -54, -14, 3, 2, -14, 6, -5, -31, 12, 0, 12, 14, -9, -40, -35, -27, 8, 5, -13, -15, -14, 10, 2, -15, -21, -5, -8, -19, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 64,128 } };
const TfArray<1, float> quant6_scale = { 1, { 0.010996093042194843, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[32] = { -1400, -717, 508, 819, -1059, 0, 0, -2046, 0, 0, 0, 3993, -761, 1379, -4217, -1582, -608, -4029, 712, 3695, 0, 0, 866, -914, -3242, -211, -1015, -781, 267, -1862, 0, -368, };
const TfArray<1, int> tensor_dimension7 = { 1, { 32 } };
const TfArray<32, float> quant7_scale = { 32, { 9.8547352536115795e-05, 5.1595317927422002e-05, 8.7619882833678275e-05, 0.00021666630345862359, 0.00014792372530791909, 3.5059416404692456e-05, 3.9899518014863133e-05, 3.4731176128843799e-05, 3.850048960885033e-05, 3.472482057986781e-05, 4.1311042878078297e-05, 0.00011163979797856882, 4.0870556404115632e-05, 0.00018135055142920464, 0.00010379504237789661, 0.00013412110274657607, 4.3614578316919506e-05, 0.00014861542149446905, 0.0001073306702892296, 9.4298615294974297e-05, 3.3019823604263365e-05, 4.0883860492613167e-05, 0.00024511149968020618, 4.6056509745540097e-05, 0.00012901988520752639, 0.00010199972166446969, 5.0509104767115787e-05, 5.2342340495670214e-05, 0.00020266797218937427, 9.8728618468157947e-05, 3.5721448512049392e-05, 0.00015447690384462476, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[32*2*4*1] = { 
  /* [0][0][][] */ -82, -106, 80, 11, 
  /* [0][1][][] */ -83, -51, 127, 17, 
  /* [1][0][][] */ -120, -127, -30, 48, 
  /* [1][1][][] */ -93, 20, -2, -63, 
  /* [2][0][][] */ 60, -127, -53, -63, 
  /* [2][1][][] */ 65, -22, -18, -92, 
  /* [3][0][][] */ -127, 10, 22, 0, 
  /* [3][1][][] */ -4, -22, 17, 24, 
  /* [4][0][][] */ 28, -127, -22, 47, 
  /* [4][1][][] */ -10, -103, -17, 104, 
  /* [5][0][][] */ -45, 74, -10, 25, 
  /* [5][1][][] */ -127, -58, -20, -103, 
  /* [6][0][][] */ 64, -34, -127, -69, 
  /* [6][1][][] */ -59, -46, -47, 40, 
  /* [7][0][][] */ 22, 72, -127, 6, 
  /* [7][1][][] */ -108, -86, 16, 56, 
  /* [8][0][][] */ 75, -30, -44, -103, 
  /* [8][1][][] */ -46, -11, -4, -127, 
  /* [9][0][][] */ -127, 123, -8, -120, 
  /* [9][1][][] */ -59, -83, -97, 40, 
  /* [10][0][][] */ 123, -109, 25, -125, 
  /* [10][1][][] */ -83, -8, -96, -127, 
  /* [11][0][][] */ -118, 30, -65, 70, 
  /* [11][1][][] */ -127, 51, 2, 47, 
  /* [12][0][][] */ -59, -2, -37, 53, 
  /* [12][1][][] */ -104, -127, -65, -67, 
  /* [13][0][][] */ 14, -89, 92, 2, 
  /* [13][1][][] */ -21, -127, -32, 34, 
  /* [14][0][][] */ 127, -55, -81, -22, 
  /* [14][1][][] */ 123, 22, -70, -66, 
  /* [15][0][][] */ 23, 39, -50, -115, 
  /* [15][1][][] */ 27, 15, -40, 127, 
  /* [16][0][][] */ -26, 51, 14, -126, 
  /* [16][1][][] */ -47, 22, -12, -127, 
  /* [17][0][][] */ -37, -47, -22, 127, 
  /* [17][1][][] */ 10, 1, -33, 64, 
  /* [18][0][][] */ -22, 75, 34, -13, 
  /* [18][1][][] */ 14, 110, -127, -36, 
  /* [19][0][][] */ -12, 97, -75, 67, 
  /* [19][1][][] */ -69, 127, -34, -9, 
  /* [20][0][][] */ -22, 2, -127, -38, 
  /* [20][1][][] */ -94, -127, -37, -100, 
  /* [21][0][][] */ -9, -71, -43, -40, 
  /* [21][1][][] */ -1, 118, 24, -127, 
  /* [22][0][][] */ 20, -9, -127, 8, 
  /* [22][1][][] */ 23, -14, -15, 25, 
  /* [23][0][][] */ 27, -118, 67, -70, 
  /* [23][1][][] */ -77, -127, -39, -73, 
  /* [24][0][][] */ 15, -48, -47, 127, 
  /* [24][1][][] */ -33, 1, -52, 91, 
  /* [25][0][][] */ 115, 90, 10, -72, 
  /* [25][1][][] */ 41, -43, -26, -127, 
  /* [26][0][][] */ -64, 22, -112, 26, 
  /* [26][1][][] */ -1, -25, -127, -8, 
  /* [27][0][][] */ -127, -23, -104, -36, 
  /* [27][1][][] */ -15, 56, -110, 38, 
  /* [28][0][][] */ 27, 2, 50, -14, 
  /* [28][1][][] */ -127, -17, 25, -17, 
  /* [29][0][][] */ -16, 5, 127, -41, 
  /* [29][1][][] */ -77, -110, 58, 15, 
  /* [30][0][][] */ 34, -104, 10, -48, 
  /* [30][1][][] */ -14, 49, 24, -127, 
  /* [31][0][][] */ 1, 71, -127, 9, 
  /* [31][1][][] */ 0, 62, 15, -38, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 32,2,4,1 } };
const TfArray<32, float> quant8_scale = { 32, { 0.0027921749278903008, 0.0014618672430515289, 0.0024825632572174072, 0.006138878408819437, 0.0041911718435585499, 0.00099335005506873131, 0.0011304862564429641, 0.00098404998425394297, 0.0010908471886068583, 0.0009838698897510767, 0.0011704794596880674, 0.0031631274614483118, 0.0011579990386962891, 0.0051382654346525669, 0.0029408594127744436, 0.0038000978529453278, 0.0012357463128864765, 0.0042107701301574707, 0.003041035495698452, 0.0026717940345406532, 0.00093556166393682361, 0.0011583759915083647, 0.0069448254071176052, 0.0013049343833699822, 0.0036555633414536715, 0.0028899919707328081, 0.0014310912229120731, 0.0014830329455435276, 0.005742258857935667, 0.0027973107062280178, 0.0010121077066287398, 0.0043768454343080521, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,5,4,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.035294119268655777, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,4,1,32 } };
const TfArray<1, float> quant10_scale = { 1, { 0.022488292306661606, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,128 } };
const TfArray<1, float> quant11_scale = { 1, { 0.022488292306661606, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,64 } };
const TfArray<1, float> quant12_scale = { 1, { 0.052127670496702194, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,5 } };
const TfArray<1, float> quant13_scale = { 1, { 0.26511982083320618, } };
const TfArray<1, int> quant13_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,5 } };
const TfArray<1, float> quant14_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 10,2 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 11,6,5 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 12,4,3 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteSoftmaxParams opdata5 = { 1 };
const TfArray<1, int> inputs5 = { 1, { 13 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension9, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 128), (TfLiteIntArray*)&g0::tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension11, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 128), (TfLiteIntArray*)&g0::tensor_dimension12, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension13, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[6] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 15, };
const size_t tflNodes_subgraph_index[] = {0, 6, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  14, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 15;
  for (size_t i = 0; i < 15; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 6; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
